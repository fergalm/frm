#!/bin/bash 

# Quick script to check everything is ready for a PR push
#TODO: turn this into functions

srcdir=poke
testdir=tests 
otherdir="bin EveningEmailCustomerTrigger MorningEmailCustomerTrigger EveningTrigger MorningTrigger HttpTrigger1"


function apply_black
{
    pass=1
    for dir in $@
    do
        black $dir/ --check --quiet
        if [ $? -eq 1 ]
        then
            echo "WARN: Black will reformat files in $dir. This will cause git check to fail"
            pass=0
        fi
        black $dir/ --quiet > /dev/null
    done

    if [ $pass -eq 1 ]
    then
        echo "PASS: Black did not reformat any files"
    fi
}


function test_flake8
{
    fail=0
    for dir in $@
    do
        flake8 --max-line-length=100 $dir > log.txt
        if [ -s log.txt ]
        then
            cat log.txt
            rm log.txt
            fail=1
        fi
    done

    if [ $fail -gt 0 ]
    then
        echo "FAIL: flake8 violations found"
        exit 1
    fi
    echo "PASS: No flake8 violations found"
}


function test_pycodestyle
{
    fail=0
    for dir in $@
    do
        pycodestyle $dir > log.txt
        if [ -s log.txt ]
        then
            cat log.txt
            rm log.txt
            fail=1
        fi
    done

    if [ $fail -gt 0 ]
    then
        echo "FAIL: pycodestyle violations found"
        exit 1
    fi
    echo "PASS: No pycodestyle violations found"
}


function test_paths_exist
{
    fail=0
    for dir in $@
    do
        if [ ! -e $dir ]
        then
            echo "Path $dir not found. Are you in top level directory"
            fail=1
        fi
    done 
    
    if [ $fail -gt 0 ]
    then
        echo "FAIL: Not all paths found"
        exit 1
    fi
    echo "PASS: All paths found"
}


function test_modified
{
    fail=0
    for dir in $@
    do
        mod=`git diff --numstat $dir  | wc -l`
        if [ $mod -gt  0 ]
        then
            echo "FAIL: $mod files in $dir need to be checked in"
            fail=1
        fi
    done 
    
    if [[ $fail -gt 0 ]]
    then
        echo "FAIL: Modified files found"
        git diff --numstat | cat
        exit 1
    fi
    echo "PASS: All files added to git are checked in"
}


function test_untracked
{
    fail=0
    for dir in $@
    do
        untracked=`find $dir -name '*.py' | xargs git status - --porcelain | grep '??' | grep -E '.py$' | wc -l`
        if [ $untracked -gt 0 ]
        then
            git status $dir --porcelain | grep '??' | grep -E '.py$'
            echo "$untracked python files found in $dir"
            fail=1
        fi
    done 

    for dir in $@
    do
        added=`find $dir -name '*.py' | xargs git status $dir --porcelain | grep 'A' | grep -E '.py$' | wc -l`
        if [ $added -gt 0 ]
        then
            git status $dir --porcelain | grep '??' | grep -E '.py$'
            echo "$added python files found in $dir added but not commited"
            fail=1
        fi
    done 

    
    if [[ $fail -gt 0 ]]
    then
        echo "FAIL: Untracked or added python files found"
        exit 1
    fi
    echo "PASS: All python files known to git"
}


function run_tests
{
    local testdir=$1
    py.test $testdir > test.log

    if [[ $? -gt 0 ]]
    then 
        cat test.log 
        echo "FAIL: Tests in $testdir not passing"
        exit 
    fi
    echo "PASS: Tests in $testdir passed"
    
}


function test_debug_statements
{
    fail=0
    
    for dir in $@
    do
        #search=`find $dir -name '*.py' | xargs grep -Hn 'pdb'` #  | sed 's/#.*//' `
        #search=`grep -rHn pdb $dir --include='*.py'`
        count=`find $dir -name '*.py' | xargs  grep -Hn 'pdb' | grep -v ':#' | wc -l`
        if [[ $count -gt 0 ]]
        then
            find $dir -name '*.py' | xargs  grep -Hn 'pdb' | grep -v ':#'
            fail=1
        fi
    done 
    
    if [[ $fail -gt 0 ]]
    then
        echo "FAIL: Debug statements lurking in code"
        exit 1
    fi
    echo "PASS: No Debug statements found"
}


function test_config_value()
{
  file=poke/config.py
  result=`grep -v '^#' $file | grep -E "email_type"`
  grep "azure" <<< $result

  if [[ $? == 0 ]]
  then
      echo "PASS: Emailer is set to Azure"
  else
      echo "FAIL: Emailer is poorly set"
      echo $result
      exit 1
  fi
}


function set_gitlog()
{
    git log --decorate=full -1  --name-only > git-version.txt
}


test_paths_exist $srcdir $testdir $otherdir
apply_black $srcdir $testdir $otherdir
test_pycodestyle $srcdir $testdir $otherdir
test_flake8 $srcdir $testdir $otherdir
test_debug_statements $srcdir $testdir $otherdir
test_modified $srcdir $testdir  $otherdir
test_untracked $srcdir $testdir $otherdir
test_config_value
run_tests $testdir/unit 
run_tests $testdir/integration
run_tests $testdir/release
set_gitlog
echo "SUCCESS"

# 
# 
# 
# 
# 
# 
